!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Elixir	a,macro	/macros (defmacro ...)/
!_TAG_KIND_DESCRIPTION!Elixir	c,callback	/callbacks (defcallback ...)/
!_TAG_KIND_DESCRIPTION!Elixir	d,delegate	/delegates (defdelegate ...)/
!_TAG_KIND_DESCRIPTION!Elixir	e,exception	/exceptions (defexception ...)/
!_TAG_KIND_DESCRIPTION!Elixir	f,function	/functions (def ...)/
!_TAG_KIND_DESCRIPTION!Elixir	g,guard	/guards (defguard ...)/
!_TAG_KIND_DESCRIPTION!Elixir	i,implementation	/implementations (defimpl ...)/
!_TAG_KIND_DESCRIPTION!Elixir	m,module	/modules (defmodule ...)/
!_TAG_KIND_DESCRIPTION!Elixir	o,operator	/operators (e.g. "defmacro a <<< b")/
!_TAG_KIND_DESCRIPTION!Elixir	p,protocol	/protocols (defprotocol...)/
!_TAG_KIND_DESCRIPTION!Elixir	r,record	/records (defrecord...)/
!_TAG_KIND_DESCRIPTION!Elixir	t,test	/tests (test ...)/
!_TAG_KIND_DESCRIPTION!Elixir	y,type	/types (@type ...)/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Elixir	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/davidsnoble/Projects/work/ex_aws_s3_fork/ex_aws_s3/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
Basic Operations	README.md	/^### Basic Operations$/;"	S	section:ExAws.S3""Operations on AWS S3
Bucket as host functionality	README.md	/^### Bucket as host functionality$/;"	S	section:ExAws.S3""Operations on AWS S3
BypassHelpers	test/support/bypass_helpers.ex	/^defmodule Support.BypassHelpers do$/;"	m
Changelog	CHANGELOG.md	/^# Changelog$/;"	c
Configuration	README.md	/^### Configuration$/;"	S	section:ExAws.S3""Operations on AWS S3
Contributing	CONTRIBUTING.md	/^Contributing$/;"	c
Current behavior	ISSUE_TEMPLATE.md	/^### Current behavior$/;"	S
Download	lib/ex_aws/s3/download.ex	/^defmodule ExAws.S3.Download do$/;"	m
DownloadTest	test/lib/s3/download_test.exs	/^defmodule ExAws.S3.DownloadTest do$/;"	m
Environment	ISSUE_TEMPLATE.md	/^### Environment$/;"	S
ExAws.S3	README.md	/^# ExAws.S3$/;"	c
Examples	README.md	/^#### Examples$/;"	t	subsection:ExAws.S3""Operations on AWS S3""Basic Operations
Examples	README.md	/^#### Examples$/;"	t	subsection:ExAws.S3""Operations on AWS S3""Bucket as host functionality
Expected behavior	ISSUE_TEMPLATE.md	/^### Expected behavior$/;"	S
FileHelpers	test/support/file_helpers.ex	/^defmodule Support.FileHelpers do$/;"	m
Higher Level Operations	README.md	/^### Higher Level Operations$/;"	S	section:ExAws.S3""Operations on AWS S3
ImplTest	test/lib/s3/utils_test.exs	/^defmodule ExAws.S3.ImplTest do$/;"	m
Installation	README.md	/^## Installation$/;"	s	chapter:ExAws.S3
Lazy	lib/ex_aws/s3/lazy.ex	/^defmodule ExAws.S3.Lazy do$/;"	m
License	README.md	/^## License$/;"	s	chapter:ExAws.S3
Mixfile	mix.exs	/^defmodule ExAws.S3.Mixfile do$/;"	m
More high level functionality	README.md	/^### More high level functionality$/;"	S	section:ExAws.S3""Operations on AWS S3
Operation	lib/ex_aws/s3/delete_all_objects.ex	/^  defimpl ExAws.Operation do$/;"	i	module:S3DeleteAllObjects
Operation	lib/ex_aws/s3/download.ex	/^defimpl ExAws.Operation, for: ExAws.S3.Download do$/;"	i	module:Download
Operation	lib/ex_aws/s3/upload.ex	/^defimpl ExAws.Operation, for: ExAws.S3.Upload do$/;"	i	module:Upload
Operations on AWS S3	README.md	/^## Operations on AWS S3$/;"	s	chapter:ExAws.S3
ParserTest	test/lib/s3/parser_test.exs	/^defmodule ExAws.S3.ParserTest do$/;"	m
Parsers	lib/ex_aws/s3/parsers.ex	/^  defmodule ExAws.S3.Parsers do$/;"	m
S3	lib/ex_aws/s3.ex	/^defmodule ExAws.S3 do$/;"	m
S3DeleteAllObjects	lib/ex_aws/s3/delete_all_objects.ex	/^defmodule ExAws.Operation.S3DeleteAllObjects do$/;"	m
S3IntegrationTest	test/lib/s3/integration_test.exs	/^defmodule ExAws.S3IntegrationTest do$/;"	m
S3Test	test/lib/s3_test.exs	/^defmodule ExAws.S3Test do$/;"	m
Upload	lib/ex_aws/s3/upload.ex	/^defmodule ExAws.S3.Upload do$/;"	m
UploadTest	test/lib/s3/upload_test.exs	/^defmodule ExAws.S3.UploadTest do$/;"	m
Utils	lib/ex_aws/s3/utils.ex	/^defmodule ExAws.S3.Utils do$/;"	m
abort_multipart_upload	lib/ex_aws/s3.ex	/^  def abort_multipart_upload(bucket, object, upload_id) do$/;"	f	module:S3
acl_condition	lib/ex_aws/s3/utils.ex	/^  defp acl_condition(acl) when is_binary(acl), do: [%{"acl" => acl}]$/;"	f	module:Utils
acl_condition	lib/ex_aws/s3/utils.ex	/^  defp acl_condition(nil), do: []$/;"	f	module:Utils
acl_condition	lib/ex_aws/s3/utils.ex	/^  defp acl_condition({:starts_with, starts_with}), do: [["starts-with", "$key", starts_with]]$/;"	f	module:Utils
acl_opt	lib/ex_aws/s3.ex	/^  @type acl_opt :: {:acl, canned_acl} | grant$/;"	y	module:S3
acl_opts	lib/ex_aws/s3.ex	/^  @type acl_opts :: [acl_opt]$/;"	y	module:S3
add_results	lib/ex_aws/s3/lazy.ex	/^  def add_results(results, opts) do$/;"	f	module:Lazy
amz_meta_opts	lib/ex_aws/s3.ex	/^  @type amz_meta_opts :: [{atom, binary} | {binary, binary}, ...]$/;"	y	module:S3
application	mix.exs	/^  def application do$/;"	f	module:Mixfile
applying rule to unversioned buckets	test/lib/s3/utils_test.exs	/^    test "applying rule to unversioned buckets" do$/;"	t	module:ImplTest
applying rule to versioned buckets	test/lib/s3/utils_test.exs	/^    test "applying rule to versioned buckets" do$/;"	t	module:ImplTest
assert_file	test/support/file_helpers.ex	/^  def assert_file(file) do$/;"	f	module:FileHelpers
assert_file	test/support/file_helpers.ex	/^  def assert_file(file, callback) when is_function(callback, 1) do$/;"	f	module:FileHelpers
assert_file	test/support/file_helpers.ex	/^  def assert_file(file, match) do$/;"	f	module:FileHelpers
assert_pre_signed_url	test/lib/s3_test.exs	/^  defp assert_pre_signed_url($/;"	f	module:S3Test
build_amz_post_policy	lib/ex_aws/s3/utils.ex	/^  def build_amz_post_policy($/;"	f	module:Utils
build_bucket_url	lib/ex_aws/s3/utils.ex	/^  def build_bucket_url(config, bucket_name) do$/;"	f	module:Utils
build_chunk_stream	lib/ex_aws/s3/download.ex	/^  def build_chunk_stream(op, config) do$/;"	f	module:Download
build_cors_rule	lib/ex_aws/s3/utils.ex	/^  def build_cors_rule(rule) do$/;"	f	module:Utils
build_encryption_headers	lib/ex_aws/s3/utils.ex	/^  def build_encryption_headers("AES256") do$/;"	f	module:Utils
build_encryption_headers	lib/ex_aws/s3/utils.ex	/^  def build_encryption_headers(aws_kms_key_id: key_id) do$/;"	f	module:Utils
build_encryption_headers	lib/ex_aws/s3/utils.ex	/^  def build_encryption_headers(headers) do$/;"	f	module:Utils
build_lifecycle_rule	lib/ex_aws/s3/utils.ex	/^  def build_lifecycle_rule(rule) do$/;"	f	module:Utils
build_meta_headers	lib/ex_aws/s3/utils.ex	/^  def build_meta_headers(meta) do$/;"	f	module:Utils
canned_acl	lib/ex_aws/s3.ex	/^  @type canned_acl ::$/;"	y	module:S3
chunk_by_newline	lib/ex_aws/s3.ex	/^      defp chunk_by_newline(_string, _newline, elements, {_offset, 0}) do$/;"	f	module:S3
chunk_by_newline	lib/ex_aws/s3.ex	/^      defp chunk_by_newline(string, newline, elements, {offset, length}) do$/;"	f	module:S3
chunk_fun	lib/ex_aws/s3.ex	/^      def chunk_fun(chunk, acc) do$/;"	f	module:S3
chunk_stream	lib/ex_aws/s3/download.ex	/^  def chunk_stream(file_size, chunk_size) do$/;"	f	module:Download
complete	lib/ex_aws/s3/upload.ex	/^  def complete([], op, config) do$/;"	f	module:Upload
complete	lib/ex_aws/s3/upload.ex	/^  def complete(parts, op, config) do$/;"	f	module:Upload
complete_multipart_upload	lib/ex_aws/s3.ex	/^  def complete_multipart_upload(bucket, object, upload_id, parts) do$/;"	f	module:S3
config	test/lib/s3_test.exs	/^  defp config(opts \\\\ []), do: ExAws.Config.new(:s3, opts)$/;"	f	module:S3Test
content_length_condition	lib/ex_aws/s3/utils.ex	/^  def content_length_condition([min, max]), do: [["content-length-range", min, max]]$/;"	f	module:Utils
content_length_condition	lib/ex_aws/s3/utils.ex	/^  def content_length_condition(nil), do: []$/;"	f	module:Utils
customer_encryption_opts	lib/ex_aws/s3.ex	/^  @type customer_encryption_opts :: [$/;"	y	module:S3
datetime_to_erlang_time	lib/ex_aws/s3/utils.ex	/^  def datetime_to_erlang_time(datetime) do$/;"	f	module:Utils
delete_all_objects	lib/ex_aws/s3.ex	/^  def delete_all_objects(bucket, objects, opts \\\\ []) do$/;"	f	module:S3
delete_all_objects	lib/ex_aws/s3/delete_all_objects.ex	/^    defp delete_all_objects(_request_fun, [], _opts, acc) do$/;"	f	module:S3DeleteAllObjects
delete_all_objects	lib/ex_aws/s3/delete_all_objects.ex	/^    defp delete_all_objects(request_fun, objects, opts, acc) do$/;"	f	module:S3DeleteAllObjects
delete_bucket	lib/ex_aws/s3.ex	/^  def delete_bucket(bucket) do$/;"	f	module:S3
delete_bucket_cors	lib/ex_aws/s3.ex	/^  def delete_bucket_cors(bucket) do$/;"	f	module:S3
delete_bucket_lifecycle	lib/ex_aws/s3.ex	/^  def delete_bucket_lifecycle(bucket) do$/;"	f	module:S3
delete_bucket_policy	lib/ex_aws/s3.ex	/^  def delete_bucket_policy(bucket) do$/;"	f	module:S3
delete_bucket_replication	lib/ex_aws/s3.ex	/^  def delete_bucket_replication(bucket) do$/;"	f	module:S3
delete_bucket_tagging	lib/ex_aws/s3.ex	/^  def delete_bucket_tagging(bucket) do$/;"	f	module:S3
delete_bucket_website	lib/ex_aws/s3.ex	/^  def delete_bucket_website(bucket) do$/;"	f	module:S3
delete_multiple_objects	lib/ex_aws/s3.ex	/^  def delete_multiple_objects(bucket, objects, opts \\\\ []) do$/;"	f	module:S3
delete_object	lib/ex_aws/s3.ex	/^  def delete_object(bucket, object, opts \\\\ []) do$/;"	f	module:S3
delete_object_opt	lib/ex_aws/s3.ex	/^  @type delete_object_opt ::$/;"	y	module:S3
delete_object_opts	lib/ex_aws/s3.ex	/^  @type delete_object_opts :: [delete_object_opt]$/;"	y	module:S3
delete_object_tagging	lib/ex_aws/s3.ex	/^  def delete_object_tagging(bucket, object, opts \\\\ []) do$/;"	f	module:S3
deps	mix.exs	/^  defp deps do$/;"	f	module:Mixfile
download_file	lib/ex_aws/s3.ex	/^  def download_file(bucket, path, dest, opts \\\\ []) do$/;"	f	module:S3
download_file_opts	lib/ex_aws/s3.ex	/^  @type download_file_opts :: [$/;"	y	module:S3
download_to	lib/ex_aws/s3/download.ex	/^  defp download_to({:error, e}, _op, _config), do: {:error, e}$/;"	f	module:Download
download_to	lib/ex_aws/s3/download.ex	/^  defp download_to({:ok, file}, op, config) do$/;"	f	module:Download
elixirc_paths	mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/support"]$/;"	f	module:Mixfile
elixirc_paths	mix.exs	/^  defp elixirc_paths(_), do: ["lib"]$/;"	f	module:Mixfile
encryption_opts	lib/ex_aws/s3.ex	/^  @type encryption_opts ::$/;"	y	module:S3
ensure_slash	lib/ex_aws/s3/utils.ex	/^  def ensure_slash("\/" <> _ = path), do: path$/;"	f	module:Utils
ensure_slash	lib/ex_aws/s3/utils.ex	/^  def ensure_slash(path), do: "\/" <> path$/;"	f	module:Utils
escape_xml_string	lib/ex_aws/s3.ex	/^  defp escape_xml_string(value) do$/;"	f	module:S3
ex_aws	mix.exs	/^  defp ex_aws() do$/;"	f	module:Mixfile
exaws_config_for_bypass	test/support/bypass_helpers.ex	/^  def exaws_config_for_bypass(bypass) do$/;"	f	module:BypassHelpers
format_acl_headers	lib/ex_aws/s3/utils.ex	/^  def format_acl_headers(%{acl: canned_acl}) do$/;"	f	module:Utils
format_acl_headers	lib/ex_aws/s3/utils.ex	/^  def format_acl_headers(grants), do: format_grant_headers(grants)$/;"	f	module:Utils
format_and_take	lib/ex_aws/s3/utils.ex	/^  def format_and_take(%{} = opts, param_list) do$/;"	f	module:Utils
format_and_take	lib/ex_aws/s3/utils.ex	/^  def format_and_take(opts, param_list) do$/;"	f	module:Utils
format_grant_header	lib/ex_aws/s3/utils.ex	/^  def format_grant_header({permission, grantees}) do$/;"	f	module:Utils
format_grant_headers	lib/ex_aws/s3/utils.ex	/^  def format_grant_headers(grants) do$/;"	f	module:Utils
generate_stream	lib/ex_aws/s3.ex	/^      def generate_stream(bucket, file, opts \\\\\\\\ []) do$/;"	f	module:S3
get_bucket_acl	lib/ex_aws/s3.ex	/^  def get_bucket_acl(bucket) do$/;"	f	module:S3
get_bucket_cors	lib/ex_aws/s3.ex	/^  def get_bucket_cors(bucket) do$/;"	f	module:S3
get_bucket_lifecycle	lib/ex_aws/s3.ex	/^  def get_bucket_lifecycle(bucket) do$/;"	f	module:S3
get_bucket_location	lib/ex_aws/s3.ex	/^  def get_bucket_location(bucket) do$/;"	f	module:S3
get_bucket_logging	lib/ex_aws/s3.ex	/^  def get_bucket_logging(bucket) do$/;"	f	module:S3
get_bucket_notification	lib/ex_aws/s3.ex	/^  def get_bucket_notification(bucket) do$/;"	f	module:S3
get_bucket_object_versions	lib/ex_aws/s3.ex	/^  def get_bucket_object_versions(bucket, opts \\\\ []) do$/;"	f	module:S3
get_bucket_policy	lib/ex_aws/s3.ex	/^  def get_bucket_policy(bucket) do$/;"	f	module:S3
get_bucket_replication	lib/ex_aws/s3.ex	/^  def get_bucket_replication(bucket) do$/;"	f	module:S3
get_bucket_request_payment	lib/ex_aws/s3.ex	/^  def get_bucket_request_payment(bucket) do$/;"	f	module:S3
get_bucket_tagging	lib/ex_aws/s3.ex	/^  def get_bucket_tagging(bucket) do$/;"	f	module:S3
get_bucket_versioning	lib/ex_aws/s3.ex	/^  def get_bucket_versioning(bucket) do$/;"	f	module:S3
get_bucket_website	lib/ex_aws/s3.ex	/^  def get_bucket_website(bucket) do$/;"	f	module:S3
get_chunk	lib/ex_aws/s3/download.ex	/^  def get_chunk(op, %{start_byte: start_byte, end_byte: end_byte}, config) do$/;"	f	module:Download
get_file_size	lib/ex_aws/s3/download.ex	/^  defp get_file_size(bucket, path, config) do$/;"	f	module:Download
get_object	lib/ex_aws/s3.ex	/^  def get_object(bucket, object, opts \\\\ []) do$/;"	f	module:S3
get_object_acl	lib/ex_aws/s3.ex	/^  def get_object_acl(bucket, object, opts \\\\ []) do$/;"	f	module:S3
get_object_opts	lib/ex_aws/s3.ex	/^  @type get_object_opts :: [$/;"	y	module:S3
get_object_response_opts	lib/ex_aws/s3.ex	/^  @type get_object_response_opts :: [$/;"	y	module:S3
get_object_tagging	lib/ex_aws/s3.ex	/^  def get_object_tagging(bucket, object, opts \\\\ []) do$/;"	f	module:S3
get_object_torrent	lib/ex_aws/s3.ex	/^  def get_object_torrent(bucket, object) do$/;"	f	module:S3
grant	lib/ex_aws/s3.ex	/^  @type grant ::$/;"	y	module:S3
grantee	lib/ex_aws/s3.ex	/^  @type grantee :: [$/;"	y	module:S3
head_bucket	lib/ex_aws/s3.ex	/^  def head_bucket(bucket) do$/;"	f	module:S3
head_object	lib/ex_aws/s3.ex	/^  def head_object(bucket, object, opts \\\\ []) do$/;"	f	module:S3
head_object_opt	lib/ex_aws/s3.ex	/^  @type head_object_opt ::$/;"	y	module:S3
head_object_opts	lib/ex_aws/s3.ex	/^  @type head_object_opts :: [head_object_opt]$/;"	y	module:S3
in_tmp	test/support/file_helpers.ex	/^  defmacro in_tmp(fun) do$/;"	a	module:FileHelpers
initialize	lib/ex_aws/s3/upload.ex	/^  def initialize(op, config) do$/;"	f	module:Upload
initiate_multipart_upload	lib/ex_aws/s3.ex	/^  def initiate_multipart_upload(bucket, object, opts \\\\ []) do$/;"	f	module:S3
initiate_multipart_upload_opt	lib/ex_aws/s3.ex	/^  @type initiate_multipart_upload_opt ::$/;"	y	module:S3
initiate_multipart_upload_opts	lib/ex_aws/s3.ex	/^  @type initiate_multipart_upload_opts :: [initiate_multipart_upload_opt]$/;"	y	module:S3
key_condition	lib/ex_aws/s3/utils.ex	/^  defp key_condition(key) when is_binary(key), do: [%{"key" => key}]$/;"	f	module:Utils
key_condition	lib/ex_aws/s3/utils.ex	/^  defp key_condition(nil), do: []$/;"	f	module:Utils
key_condition	lib/ex_aws/s3/utils.ex	/^  defp key_condition({:starts_with, starts_with}), do: [["starts-with", "$key", starts_with]]$/;"	f	module:Utils
list_buckets	lib/ex_aws/s3.ex	/^  def list_buckets(opts \\\\ []) do$/;"	f	module:S3
list_multipart_uploads	lib/ex_aws/s3.ex	/^  def list_multipart_uploads(bucket, opts \\\\ []) do$/;"	f	module:S3
list_objects	lib/ex_aws/s3.ex	/^  def list_objects(bucket, opts \\\\ []) do$/;"	f	module:S3
list_objects_opts	lib/ex_aws/s3.ex	/^  @type list_objects_opts :: [$/;"	y	module:S3
list_objects_v2	lib/ex_aws/s3.ex	/^  def list_objects_v2(bucket, opts \\\\ []) do$/;"	f	module:S3
list_objects_v2_opts	lib/ex_aws/s3.ex	/^  @type list_objects_v2_opts :: [$/;"	y	module:S3
list_parts	lib/ex_aws/s3.ex	/^  def list_parts(bucket, object, upload_id, opts \\\\ []) do$/;"	f	module:S3
livecycle_trigger	lib/ex_aws/s3/utils.ex	/^  defp livecycle_trigger(action, {:date, %Date{} = date})$/;"	f	module:Utils
livecycle_trigger	lib/ex_aws/s3/utils.ex	/^  defp livecycle_trigger(action, {:days, days})$/;"	f	module:Utils
missing_xml_parser	lib/ex_aws/s3/parsers.ex	/^    defp missing_xml_parser(), do: raise(ExAws.Error, "Missing XML parser. Please see docs")$/;"	f	module:Parsers
namespace	lib/ex_aws/s3/utils.ex	/^  def namespace(list, value) do$/;"	f	module:Utils
next_marker	lib/ex_aws/s3/lazy.ex	/^  def next_marker(%{next_marker: "", contents: contents}) do$/;"	f	module:Lazy
next_marker	lib/ex_aws/s3/lazy.ex	/^  def next_marker(%{next_marker: marker}), do: marker$/;"	f	module:Lazy
normalize_param	lib/ex_aws/s3/utils.ex	/^  def normalize_param(:version_id), do: "versionId"$/;"	f	module:Utils
normalize_param	lib/ex_aws/s3/utils.ex	/^  def normalize_param(other), do: other$/;"	f	module:Utils
normalize_param	lib/ex_aws/s3/utils.ex	/^  def normalize_param(param) when is_atom(param) do$/;"	f	module:Utils
options_object	lib/ex_aws/s3.ex	/^  def options_object(bucket, object, origin, request_method, request_headers \\\\ []) do$/;"	f	module:S3
package	mix.exs	/^  defp package do$/;"	f	module:Mixfile
parse_all_my_buckets_result	lib/ex_aws/s3/parsers.ex	/^    def parse_all_my_buckets_result(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_all_my_buckets_result	lib/ex_aws/s3/parsers.ex	/^    def parse_all_my_buckets_result(val), do: val$/;"	f	module:Parsers
parse_all_my_buckets_result	lib/ex_aws/s3/parsers.ex	/^    def parse_all_my_buckets_result({:ok, resp = %{body: xml}}) do$/;"	f	module:Parsers
parse_bucket_object_versions	lib/ex_aws/s3/parsers.ex	/^    def parse_bucket_object_versions({:ok, resp = %{body: xml}}) do$/;"	f	module:Parsers
parse_complete_multipart_upload	lib/ex_aws/s3/parsers.ex	/^    def parse_complete_multipart_upload(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_complete_multipart_upload	lib/ex_aws/s3/parsers.ex	/^    def parse_complete_multipart_upload(val), do: val$/;"	f	module:Parsers
parse_initiate_multipart_upload	lib/ex_aws/s3/parsers.ex	/^    def parse_initiate_multipart_upload(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_initiate_multipart_upload	lib/ex_aws/s3/parsers.ex	/^    def parse_initiate_multipart_upload(val), do: val$/;"	f	module:Parsers
parse_initiate_multipart_upload	lib/ex_aws/s3/parsers.ex	/^    def parse_initiate_multipart_upload({:ok, resp = %{body: xml}}) do$/;"	f	module:Parsers
parse_list_multipart_uploads	lib/ex_aws/s3/parsers.ex	/^    def parse_list_multipart_uploads(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_list_multipart_uploads	lib/ex_aws/s3/parsers.ex	/^    def parse_list_multipart_uploads(val), do: val$/;"	f	module:Parsers
parse_list_multipart_uploads	lib/ex_aws/s3/parsers.ex	/^    def parse_list_multipart_uploads({:ok, %{body: xml} = resp}) do$/;"	f	module:Parsers
parse_list_objects	lib/ex_aws/s3/parsers.ex	/^    def parse_list_objects(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_list_objects	lib/ex_aws/s3/parsers.ex	/^    def parse_list_objects(val), do: val$/;"	f	module:Parsers
parse_list_objects	lib/ex_aws/s3/parsers.ex	/^    def parse_list_objects({:ok, resp = %{body: xml}}) do$/;"	f	module:Parsers
parse_list_parts	lib/ex_aws/s3/parsers.ex	/^    def parse_list_parts(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_list_parts	lib/ex_aws/s3/parsers.ex	/^    def parse_list_parts(val), do: val$/;"	f	module:Parsers
parse_list_parts	lib/ex_aws/s3/parsers.ex	/^    def parse_list_parts({:ok, %{body: xml} = resp}) do$/;"	f	module:Parsers
parse_object_tagging	lib/ex_aws/s3/parsers.ex	/^    def parse_object_tagging(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_object_tagging	lib/ex_aws/s3/parsers.ex	/^    def parse_object_tagging(val), do: val$/;"	f	module:Parsers
parse_object_tagging	lib/ex_aws/s3/parsers.ex	/^    def parse_object_tagging({:ok, resp = %{body: xml}}) do$/;"	f	module:Parsers
parse_upload	lib/ex_aws/s3/parsers.ex	/^    def parse_upload({:ok, resp = %{body: xml}}) do$/;"	f	module:Parsers
parse_upload_part_copy	lib/ex_aws/s3/parsers.ex	/^    def parse_upload_part_copy(_val), do: missing_xml_parser()$/;"	f	module:Parsers
parse_upload_part_copy	lib/ex_aws/s3/parsers.ex	/^    def parse_upload_part_copy(val), do: val$/;"	f	module:Parsers
perform	lib/ex_aws/s3/delete_all_objects.ex	/^    def perform(%{bucket: bucket, objects: objects, opts: opts}, config) do$/;"	f	module:S3DeleteAllObjects
perform	lib/ex_aws/s3/download.ex	/^  def perform(op, config) do$/;"	f	module:Download
perform	lib/ex_aws/s3/upload.ex	/^  def perform(op, config) do$/;"	f	module:Upload
post_object_restore	lib/ex_aws/s3.ex	/^  def post_object_restore(bucket, object, number_of_days, opts \\\\ []) do$/;"	f	module:S3
presigned_post	lib/ex_aws/s3.ex	/^  def presigned_post(config, bucket, key, opts \\\\ []) do$/;"	f	module:S3
presigned_post_opts	lib/ex_aws/s3.ex	/^  @type presigned_post_opts :: [$/;"	y	module:S3
presigned_post_result	lib/ex_aws/s3.ex	/^  @type presigned_post_result :: %{$/;"	y	module:S3
presigned_url	lib/ex_aws/s3.ex	/^  def presigned_url(config, http_method, bucket, object, opts \\\\ []) do$/;"	f	module:S3
presigned_url_opts	lib/ex_aws/s3.ex	/^  @type presigned_url_opts :: [$/;"	y	module:S3
project	mix.exs	/^  def project do$/;"	f	module:Mixfile
put_accelerate_host	lib/ex_aws/s3.ex	/^  defp put_accelerate_host(config) do$/;"	f	module:S3
put_bucket	lib/ex_aws/s3.ex	/^  def put_bucket(bucket, "", opts), do: put_bucket(bucket, "us-east-1", opts)$/;"	f	module:S3
put_bucket	lib/ex_aws/s3.ex	/^  def put_bucket(bucket, region, opts \\\\ [])$/;"	f	module:S3
put_bucket	lib/ex_aws/s3.ex	/^  def put_bucket(bucket, region, opts) do$/;"	f	module:S3
put_bucket_acl	lib/ex_aws/s3.ex	/^  def put_bucket_acl(bucket, grants) do$/;"	f	module:S3
put_bucket_body	lib/ex_aws/s3.ex	/^  defp put_bucket_body("us-east-1"), do: ""$/;"	f	module:S3
put_bucket_body	lib/ex_aws/s3.ex	/^  defp put_bucket_body(region) do$/;"	f	module:S3
put_bucket_cors	lib/ex_aws/s3.ex	/^  def put_bucket_cors(bucket, cors_rules) do$/;"	f	module:S3
put_bucket_lifecycle	lib/ex_aws/s3.ex	/^  def put_bucket_lifecycle(bucket, lifecycle_rules) do$/;"	f	module:S3
put_bucket_logging	lib/ex_aws/s3.ex	/^  def put_bucket_logging(bucket, _logging_config) do$/;"	f	module:S3
put_bucket_notification	lib/ex_aws/s3.ex	/^  def put_bucket_notification(bucket, _notification_config) do$/;"	f	module:S3
put_bucket_policy	lib/ex_aws/s3.ex	/^  def put_bucket_policy(bucket, policy) do$/;"	f	module:S3
put_bucket_replication	lib/ex_aws/s3.ex	/^  def put_bucket_replication(bucket, _replication_config) do$/;"	f	module:S3
put_bucket_request_payment	lib/ex_aws/s3.ex	/^  def put_bucket_request_payment(bucket, _payer) do$/;"	f	module:S3
put_bucket_tagging	lib/ex_aws/s3.ex	/^  def put_bucket_tagging(bucket, _tags) do$/;"	f	module:S3
put_bucket_versioning	lib/ex_aws/s3.ex	/^  def put_bucket_versioning(bucket, version_config) do$/;"	f	module:S3
put_bucket_website	lib/ex_aws/s3.ex	/^  def put_bucket_website(bucket, _website_config) do$/;"	f	module:S3
put_object	lib/ex_aws/s3.ex	/^  def put_object(bucket, object, body, opts \\\\ []) do$/;"	f	module:S3
put_object_acl	lib/ex_aws/s3.ex	/^  def put_object_acl(bucket, object, acl) do$/;"	f	module:S3
put_object_copy	lib/ex_aws/s3.ex	/^  def put_object_copy(dest_bucket, dest_object, src_bucket, src_object, opts \\\\ []) do$/;"	f	module:S3
put_object_copy_opts	lib/ex_aws/s3.ex	/^  @type put_object_copy_opts :: [$/;"	y	module:S3
put_object_headers	lib/ex_aws/s3/utils.ex	/^  def put_object_headers(opts) do$/;"	f	module:Utils
put_object_opts	lib/ex_aws/s3.ex	/^  @type put_object_opts :: [$/;"	y	module:S3
put_object_tagging	lib/ex_aws/s3.ex	/^  def put_object_tagging(bucket, object, tags, opts \\\\ []) do$/;"	f	module:S3
request	lib/ex_aws/s3.ex	/^  defp request(http_method, bucket, path, data \\\\ [], opts \\\\ %{}) do$/;"	f	module:S3
sanitized_port_component	lib/ex_aws/s3/utils.ex	/^  def sanitized_port_component(%{port: nil}), do: ""$/;"	f	module:Utils
sanitized_port_component	lib/ex_aws/s3/utils.ex	/^  def sanitized_port_component(%{port: port}) when port in @excluded_ports, do: ""$/;"	f	module:Utils
sanitized_port_component	lib/ex_aws/s3/utils.ex	/^  def sanitized_port_component(%{port: port}), do: ":#{port}"$/;"	f	module:Utils
sanitized_port_component	lib/ex_aws/s3/utils.ex	/^  def sanitized_port_component(_), do: ""$/;"	f	module:Utils
setup_multipart_download_backend	test/lib/s3/download_test.exs	/^  defp setup_multipart_download_backend(bypass, test_pid, bucket_name, path, file_body) do$/;"	f	module:DownloadTest
setup_multipart_upload_backend	test/lib/s3/upload_test.exs	/^  defp setup_multipart_upload_backend(bypass, test_pid, bucket_name, path) do$/;"	f	module:UploadTest
start_bypass	test/support/bypass_helpers.ex	/^  def start_bypass(_) do$/;"	f	module:BypassHelpers
stream!	lib/ex_aws/s3/delete_all_objects.ex	/^    def stream!(%{bucket: bucket, objects: objects, opts: opts}, config) do$/;"	f	module:S3DeleteAllObjects
stream!	lib/ex_aws/s3/download.ex	/^  def stream!(op, config) do$/;"	f	module:Download
stream!	lib/ex_aws/s3/upload.ex	/^  def stream!(_, _), do: raise("not implemented")$/;"	f	module:Upload
stream_file	lib/ex_aws/s3/upload.ex	/^  def stream_file(path, opts \\\\ []) do$/;"	f	module:Upload
stream_objects!	lib/ex_aws/s3/lazy.ex	/^  def stream_objects!(bucket, opts, config) do$/;"	f	module:Lazy
stream_objects_v2!	lib/ex_aws/s3/lazy.ex	/^  def stream_objects_v2!(bucket, opts, config) do$/;"	f	module:Lazy
t	lib/ex_aws/s3/delete_all_objects.ex	/^  @type t :: %__MODULE__{}$/;"	y	module:S3DeleteAllObjects
t	lib/ex_aws/s3/download.ex	/^  @type t :: %__MODULE__{}$/;"	y	module:Download
t	lib/ex_aws/s3/upload.ex	/^  @type t :: %__MODULE__{$/;"	y	module:Upload
tmp_path	test/support/file_helpers.ex	/^  def tmp_path do$/;"	f	module:FileHelpers
to_line_stream_after_fun	lib/ex_aws/s3.ex	/^      defp to_line_stream_after_fun(""), do: {:cont, []}$/;"	f	module:S3
to_line_stream_after_fun	lib/ex_aws/s3.ex	/^      defp to_line_stream_after_fun(acc), do: {:cont, [acc], []}$/;"	f	module:S3
upload	lib/ex_aws/s3.ex	/^  def upload(source, bucket, path, opts \\\\ []) do$/;"	f	module:S3
upload	lib/ex_aws/s3/parsers.ex	/^    def upload(_val), do: missing_xml_parser()$/;"	f	module:Parsers
upload_chunk	lib/ex_aws/s3/upload.ex	/^  def upload_chunk({chunk, i}, op, config) do$/;"	f	module:Upload
upload_chunk!	lib/ex_aws/s3/upload.ex	/^  def upload_chunk!({chunk, i}, op, config) do$/;"	f	module:Upload
upload_opt	lib/ex_aws/s3.ex	/^  @type upload_opt ::$/;"	y	module:S3
upload_opts	lib/ex_aws/s3.ex	/^  @type upload_opts :: [upload_opt]$/;"	y	module:S3
upload_part	lib/ex_aws/s3.ex	/^  def upload_part(bucket, object, upload_id, part_number, body, _opts \\\\ []) do$/;"	f	module:S3
upload_part_copy	lib/ex_aws/s3.ex	/^  def upload_part_copy(dest_bucket, dest_object, src_bucket, src_object, opts \\\\ []) do$/;"	f	module:S3
upload_part_copy_opts	lib/ex_aws/s3.ex	/^  @type upload_part_copy_opts :: [$/;"	y	module:S3
url_to_sign	lib/ex_aws/s3.ex	/^  defp url_to_sign(bucket, object, config, virtual_host, bucket_as_host) do$/;"	f	module:S3
